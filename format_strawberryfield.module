<?php
/**
 * @file
 * Contains formater_strawberryfield.module.
 */
use \Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Form\FormStateInterface;
/**
 * Implements hook_page_attachments().
 *
 * Adds the iiif_openseadragon js library.
 */
function format_strawberryfield_page_attachments(array &$page) {
    /*if (!\Drupal::currentUser()->hasPermission('access search')) {
        return;
    @TODO discuss if we need to limit viewers to a particular role?
    Could be nice to allow annotations as a drop replacement
    of the same viewer dependant on the rol
    }*/

    // Remove IIIF on admin routes, why make peoples life more complicated
    /* if (\Drupal::service('router.admin_context')->isAdminRoute()) {
        return;
    }*/
    $page['#attached']['library'][] = 'format_strawberryfield/iiif_openseadragon';
    $page['#attached']['library'][] = 'format_strawberryfield/iiif_iabookreader';
    $page['#attached']['library'][] = 'format_strawberryfield/pannellum';
    $page['#attached']['library'][] = 'format_strawberryfield/jsm_modeler';
    $page['#attached']['library'][] = 'core/jquery';
    $page['#attached']['library'][] = 'core/drupal.dialog.ajax';
    $page['#attached']['library'][] = 'core/drupal.ajax';

}

function format_strawberryfield_entity_view_mode_alter(&$view_mode, EntityInterface $entity, $context) {
  if ($entity->getEntityTypeId() == 'node' && $view_mode == 'full') {
    $adotype = [];
    $original_view_mode = $view_mode;
    /* @var \Drupal\Core\Config\ImmutableConfig $config */
    if ($sbf_fields = \Drupal::service('strawberryfield.utility')->bearsStrawberryfield($entity)) {
      foreach ($sbf_fields as $field_name) {
        /* @var $field StrawberryFieldItem */
        $field = $entity->get($field_name);
        if (!$field->isEmpty()) {
          foreach ($field->getIterator() as $delta => $itemfield) {
            /** @var $itemfield \Drupal\strawberryfield\Plugin\Field\FieldType\StrawberryFieldItem */
            $flatvalues = (array) $itemfield->provideFlatten();
            if (isset($flatvalues['type'])) {
              $adotype = array_merge($adotype, (array) $flatvalues['type']);
            }
          }
        }
      }
    }
    if (!empty($adotype)) {
      $config = \drupal::config(
      'format_strawberryfield.viewmodemapping_settings'
      );
      $viewmodemappings = $config->get('type_to_viewmode');
      $viewmodemappings = !empty($viewmodemappings) ? (array) $viewmodemappings : [];
      usort($viewmodemappings, ['\Drupal\format_strawberryfield\Form\ViewModeMappingSettingsForm', 'sortSettings']);

      foreach ($viewmodemappings as $viewmodemapping) {
        if (($viewmodemapping['active'] == TRUE) && in_array($viewmodemapping['jsontype'],$adotype)) {
          $view_mode = $viewmodemapping['view_mode'];
          break;
        }
      }
    }
    // To be determined if we want to be dependat on ds module or not
    // if so we really want to act on this alter and not the general one.
    /* \Drupal::moduleHandler()->alter('ds_switch_view_mode', $view_mode, $original_view_mode, $entity); */
  }
}

/**
 * Implements hook_theme().
 */
function format_strawberryfield_theme() {
  return [
    'format_strawberryfield_pdfs' => [
      'variables' => [
        'item' => NULL
      ],
      'template' => 'format-strawberryfield-pdfs'
    ],
  ];
}

/**
 * Implements hook__file_mimetype_mapping_alter().
 */
function format_strawberryfield_file_mimetype_mapping_alter(&$mapping) {
  // Add relevant Repository Mimetypes missing from D8
  $mapping['mimetypes']['obj_model_mimetype'] = 'model/obj';
  $mapping['mimetypes']['webarchive_mimetype'] = 'application/warc';
  $mapping['extensions']['obj'] = 'obj_model_mimetype';
  $mapping['extensions']['warc'] = 'webarchive_mimetype';
  $mapping['extensions']['wacz'] = 'webarchive_mimetype';
  $mapping['extensions']['warc.gz'] = 'webarchive_mimetype';
  // @see https://www.iana.org/assignments/media-types/media-types.xhtml

}

/**
 * Implements hook_ENTITY_TYPE_prepare_form() for node entities.
 */
function format_strawberryfield_node_prepare_form(NodeInterface $entity, $operation, FormStateInterface $form_state) {
  // Prepare defaults for the add/edit form.
  //Because of Form Modes we can not only depend on "edit". But more likely on
  if (($operation == 'delete' || $operation == 'quick_node_clone')) {
    return;
  }
  $account = \Drupal::currentUser();
  if (($sbf_fields = \Drupal::service('strawberryfield.utility')->bearsStrawberryfield($entity)) && $account->hasPermission('add strawberryfield webannotation')) {
    foreach ($sbf_fields as $field_name) {
      /* @var $field \Drupal\Core\Field\FieldItemInterface */
      $field = $entity->get($field_name);
      /* @var \Drupal\strawberryfield\Field\StrawberryFieldItemList $field */
      $entity = $field->getEntity();
      $entity_type_id = $entity->getEntityTypeId();
      /** @var $field \Drupal\Core\Field\FieldItemList */
      foreach ($field->getIterator() as $delta => $itemfield) {
        /** @var $itemfield \Drupal\strawberryfield\Plugin\Field\FieldType\StrawberryFieldItem */
        $fullvalues = $itemfield->provideDecoded(TRUE);
        /* @var $tempstore \Drupal\Core\TempStore\PrivateTempStore */
        $tempstore = \Drupal::service('tempstore.private')->get('webannotation');
        $annotation_values =  $tempstore->get($entity->uuid());
        if (count($annotation_values)) {
          if (!isset($fullvalues['ap:annotationCollection'])) {
            $fullvalues['ap:annotationCollection'] = [];
          }
          $fullvalues['ap:annotationCollection'] =  array_merge_recursive($annotation_values, $fullvalues['ap:annotationCollection']);
          $entity->{$field_name}[0]->setMainValueFromArray($fullvalues);
          \Drupal::messenger()->addStatus(\Drupal::translation()->formatPlural(count($annotation_values),
            'You have one pending WebAnnotation for this Digital Object. To persist Save the Object. ',
            'You have %number unsaved WebAnnotation for this Digital Object.To persist Save the Object.',
            ['%number' => count($annotation_values)]
          ));
          $form_state->set('hadAnnotations', TRUE);
          break 2;
        }
        if (!is_array($fullvalues)) {
          break;
        }

      }
    }
  }
}