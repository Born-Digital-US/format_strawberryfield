<?php
namespace Drupal\format_strawberryfield\Controller;


use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\format_strawberryfield\Entity\MetadataExposeConfigEntity;
use Drupal\search_api\ParseMode\ParseModePluginManager;
use Drupal\strawberryfield\Controller\StrawberryfieldFlavorDatasourceSearchController;
use Drupal\strawberryfield\StrawberryfieldUtilityService;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\HttpFoundation\File\MimeType\ExtensionGuesser;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\Mime\MimeTypes;

class MetadataDisplaySearchController extends
  StrawberryfieldFlavorDatasourceSearchController {

  /**
   * Mime type guesser service.
   *
   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
   */
  protected $mimeTypeGuesser;

  /**
   * Class Resolver service.
   *
   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
   */
  protected $classResolver;

  /**
   * OCR Search Controller. Can deal with multiple formats/requests types
   *
   * @param \Symfony\Component\HttpFoundation\Request $request
   * @param \Drupal\Core\Entity\ContentEntityInterface $node
   * @param string $fileuuid
   * @param string $processor
   * @param string $format
   * @param string $page
   *
   * @return \Symfony\Component\HttpFoundation\Response
   * @throws \Drupal\Component\Plugin\Exception\PluginException
   * @throws \Drupal\search_api\SearchApiException
   */
  public function searchWithMetadataDisplay(Request $request, ContentEntityInterface $node, MetadataExposeConfigEntity $metadataexposeconfigentity, string $fileuuid = 'all', string $processor = 'ocr', string $format = 'json', string $page = 'all') {




      $result = $this->search(
        $request, $node, $fileuuid, $processor, $format, $page
      );
      $resultjson_string = $result->getContent();
      $resultjson = json_decode($resultjson_string);






      // Now give the result the right page number!

    $entity = $metadataexposeconfigentity->getMetadataDisplayEntity();
    if ($entity) {
      $responsetypefield = $entity->get('mimetype');
      $responsetype = $responsetypefield->first()->getValue();

      $responsetype = $responsetype['value'] ?? 'text/html';

      if (!in_array(
        $responsetype, ['application/ld+json', 'application/json']
      )
      ) {
        return;
      }
      else {
        $extension = $this->mimeTypeGuesser->inverseguess($responsetype);
      }

      $filename = !empty($extension) ? 'default.' . $extension : 'default.json';


      /** @var \Drupal\format_strawberryfield\Controller\MetadataExposeDisplayController $controller */
      $controller = $this->classResolver->getInstanceFromDefinition(
        '\Drupal\format_strawberryfield\Controller\MetadataExposeDisplayController'
      );
      $response = $controller->castViaTwig(
        $node, $metadataexposeconfigentity, $filename
      );
      if ($response->isSuccessful()) {
        $json_string = $response->getContent();
        $json = json_decode($json_string, TRUE);
        if (json_last_error() == JSON_ERROR_NONE) {
          $iiif_structures = $json['structures'][0]['items'] ?? [];
          foreach ($iiif_structures as $range_item) {
            // This will be the order of the pages
            if ($range_item['type'] == 'Canvas') {
              $order[] = $range_item['id'];
            }
          }
        }
      }




      return $result;
    }
  }

  public static function create(ContainerInterface $container) {
    $instance = parent::create($container); // TODO: Change the autogenerated stub
    $instance->classResolver = $container->get('class_resolver');
    $instance->mimeTypeGuesser = $container->get('strawberryfield.mime_type.guesser.mime');
    return $instance;
  }


}
